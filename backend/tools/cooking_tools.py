import pandas as pd
from typing import List, Dict, Any
import re
from sklearn.preprocessing import MinMaxScaler
import numpy as np

class CookingTools:
    def __init__(self):
        """Initialize cooking tools with recipe data"""
        try:
            self.recipes_df = pd.read_csv('data/recipes.csv')
            # Chu·∫©n h√≥a c√°c gi√° tr·ªã s·ªë ƒë·ªÉ t√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng
            self.scaler = MinMaxScaler()
            if not self.recipes_df.empty:
                self.recipes_df['normalized_time'] = self.scaler.fit_transform(
                    self.recipes_df[['cook_time']].values
                )
                # Chuy·ªÉn ƒë·ªïi ƒë·ªô kh√≥ th√†nh s·ªë
                difficulty_map = {'D·ªÖ': 1, 'Trung b√¨nh': 2, 'Kh√≥': 3}
                self.recipes_df['difficulty_score'] = self.recipes_df['difficulty'].map(difficulty_map)
                self.recipes_df['normalized_difficulty'] = self.scaler.fit_transform(
                    self.recipes_df[['difficulty_score']].values
                )
        except Exception as e:
            print(f"Error loading recipes file: {str(e)}")
            self.recipes_df = pd.DataFrame()
        
    def recipe_finder(self, query: str) -> str:
        """Find recipes based on exact name match"""
        if self.recipes_df.empty:
            return "Xin l·ªói, kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c√¥ng th·ª©c n·∫•u ƒÉn."
            
        # Convert query to lowercase for case-insensitive search
        query = query.lower()
        
        # Search for exact matches in recipe_name
        matches = self.recipes_df[
            self.recipes_df['recipe_name'].str.lower() == query
        ]
        
        if matches.empty:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y m√≥n {query} trong c∆° s·ªü d·ªØ li·ªáu c·ªßa m√¨nh. T√¥i ch·ªâ c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ c√°c m√≥n c√≥ trong danh s√°ch."
            
        # Format the matching recipe
        recipe = matches.iloc[0]
        ingredients = recipe['ingredients'].replace(';', '\n- ')
        instructions = recipe['instructions'].replace(';', '\n')
        
        return (
            f"ƒê√¢y l√† c√¥ng th·ª©c n·∫•u m√≥n {recipe['recipe_name']}:\n\n" +
            f"Phong c√°ch: {recipe['cuisine']}\n" +
            f"ƒê·ªô kh√≥: {recipe['difficulty']}\n" +
            f"Th·ªùi gian chu·∫©n b·ªã: {recipe['prep_time']} ph√∫t\n" +
            f"Th·ªùi gian n·∫•u: {recipe['cook_time']} ph√∫t\n" +
            f"Ph·ª•c v·ª•: {recipe['servings']} ng∆∞·ªùi\n\n" +
            f"Nguy√™n li·ªáu c·∫ßn c√≥:\n- {ingredients}\n\n" +
            "C√°c b∆∞·ªõc th·ª±c hi·ªán:\n" +
            f"{instructions}\n\n" +
            f"M·∫πo: {recipe['tips']}"
        )

    def ingredient_substitute(self, ingredient: str) -> str:
        """Suggest substitutes for common ingredients"""
        # Common substitutions dictionary
        substitutes = {
            "butter": "margarine, olive oil, coconut oil",
            "eggs": "mashed banana, applesauce (in baking), tofu (in savory dishes)",
            "milk": "almond milk, soy milk, oat milk",
            "cream": "coconut cream, cashew cream",
            "flour": "almond flour, coconut flour, oat flour",
            "sugar": "honey, maple syrup, stevia",
            "soy sauce": "coconut aminos, tamari",
            "rice": "quinoa, cauliflower rice",
            "pasta": "zucchini noodles, spaghetti squash",
            "meat": "tofu, tempeh, mushrooms",
        }
        
        ingredient = ingredient.lower()
        if ingredient in substitutes:
            return f"For {ingredient}, you can use: {substitutes[ingredient]}"
        return f"No common substitutes found for {ingredient}. Try asking for a specific dietary requirement."

    def portion_calculator(self, recipe_name: str, desired_servings: int) -> str:
        """Calculate ingredient portions for desired number of servings"""
        # Find the recipe
        recipe = self.recipes_df[self.recipes_df['recipe_name'].str.lower() == recipe_name.lower()]
        if recipe.empty:
            return "Recipe not found."
            
        # Get original servings and ingredients
        original_servings = recipe.iloc[0]['servings']
        ingredients = recipe.iloc[0]['ingredients'].split(';')
        
        # Calculate multiplier
        multiplier = desired_servings / original_servings
        
        # Adjust quantities
        adjusted_ingredients = []
        for ingredient in ingredients:
            # Try to find and adjust numeric quantities
            match = re.search(r'(\d+\.?\d*)', ingredient)
            if match:
                original_qty = float(match.group(1))
                new_qty = original_qty * multiplier
                adjusted = ingredient.replace(match.group(1), str(round(new_qty, 1)))
                adjusted_ingredients.append(adjusted)
            else:
                adjusted_ingredients.append(ingredient)
        
        ingredients_text = ', '.join(adjusted_ingredients)
        return (
            f"Adjusted recipe for {desired_servings} servings" + "\n" +
            "Ingredients:" + "\n" +
            f"{ingredients_text}"
        )

    def cooking_timer(self, recipe_name: str) -> str:
        """Get timing information for a recipe"""
        recipe = self.recipes_df[self.recipes_df['recipe_name'].str.lower() == recipe_name.lower()]
        if recipe.empty:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y m√≥n {recipe_name} trong c∆° s·ªü d·ªØ li·ªáu c·ªßa m√¨nh."
            
        r = recipe.iloc[0]
        instructions = r['instructions'].replace(';', '\n')
        
        return (
            f"Th√¥ng tin th·ªùi gian n·∫•u m√≥n {r['recipe_name']}:\n\n" +
            f"Th·ªùi gian chu·∫©n b·ªã: {r['prep_time']} ph√∫t\n" +
            f"Th·ªùi gian n·∫•u: {r['cook_time']} ph√∫t\n" +
            f"T·ªïng th·ªùi gian: {r['prep_time'] + r['cook_time']} ph√∫t\n\n" +
            "C√°c b∆∞·ªõc th·ª±c hi·ªán:\n" +
            f"{instructions}"
        )

    def nutrition_info(self, recipe_name: str) -> str:
        """Get nutritional information for a recipe"""
        recipe = self.recipes_df[self.recipes_df['recipe_name'].str.lower() == recipe_name.lower()]
        if recipe.empty:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y m√≥n {recipe_name} trong c∆° s·ªü d·ªØ li·ªáu c·ªßa m√¨nh."
            
        r = recipe.iloc[0]
        nutrition = dict(item.split(':') for item in r['nutrition'].split(';'))
        
        return (
            f"Th√¥ng tin dinh d∆∞·ª°ng cho m√≥n {r['recipe_name']} (cho m·ªói ph·∫ßn ƒÉn):\n\n" +
            f"Calories: {nutrition['calories']}\n" +
            f"Protein: {nutrition['protein']}\n" +
            f"Carbohydrates: {nutrition['carbs']}\n" +
            f"Ch·∫•t b√©o: {nutrition['fat']}\n\n" +
            f"M√≥n ƒÉn n√†y ƒë·ªß cho {r['servings']} ng∆∞·ªùi ƒÉn."
        )

    def list_ingredients(self, recipe_name: str) -> str:
        """Li·ªát k√™ nguy√™n li·ªáu c·∫ßn thi·∫øt cho m·ªôt m√≥n ƒÉn"""
        if self.recipes_df.empty:
            return "Xin l·ªói, kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c√¥ng th·ª©c n·∫•u ƒÉn."
            
        # T√¨m m√≥n ƒÉn trong database b·∫±ng t√™n ch√≠nh x√°c
        recipe = self.recipes_df[self.recipes_df['recipe_name'].str.lower() == recipe_name.lower()]
        
        if recipe.empty:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y m√≥n {recipe_name} trong c∆° s·ªü d·ªØ li·ªáu c·ªßa m√¨nh."
        
        # L·∫•y v√† ƒë·ªãnh d·∫°ng th√¥ng tin nguy√™n li·ªáu
        ingredients = recipe.iloc[0]['ingredients'].replace(';', '\n- ')
        return f"ƒê·ªÉ n·∫•u m√≥n {recipe_name}, b·∫°n c·∫ßn nh·ªØng nguy√™n li·ªáu sau:\n- {ingredients}"

    def recipe_recommender(self, preferences: str) -> str:
        """G·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n s·ªü th√≠ch c·ªßa ng∆∞·ªùi d√πng"""
        if self.recipes_df.empty:
            return "Xin l·ªói, kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c√¥ng th·ª©c n·∫•u ƒÉn."

        try:
            # Parse preferences from input string
            prefs = {}
            for pref in preferences.split(','):
                key, value = pref.split(':')
                prefs[key.strip().lower()] = value.strip().lower()

            # T√≠nh ƒëi·ªÉm ph√π h·ª£p cho m·ªói c√¥ng th·ª©c
            scores = []
            for _, recipe in self.recipes_df.iterrows():
                score = 0

                # ƒê√°nh gi√° th·ªùi gian n·∫•u
                if 'time' in prefs:
                    desired_time = float(prefs['time'])
                    normalized_desired_time = self.scaler.transform(np.array([[desired_time]]))[0][0]
                    time_diff = abs(recipe['normalized_time'] - normalized_desired_time)
                    score += (1 - time_diff)  # C√†ng g·∫ßn c√†ng t·ªët

                # ƒê√°nh gi√° ƒë·ªô kh√≥
                if 'difficulty' in prefs:
                    difficulty_map = {'d·ªÖ': 1, 'trung b√¨nh': 2, 'kh√≥': 3}
                    if prefs['difficulty'] in difficulty_map:
                        if recipe['difficulty'].lower() == prefs['difficulty']:
                            score += 1

                # ƒê√°nh gi√° s·ªë ng∆∞·ªùi ƒÉn
                if 'servings' in prefs:
                    desired_servings = int(prefs['servings'])
                    if recipe['servings'] == desired_servings:
                        score += 1
                    elif abs(recipe['servings'] - desired_servings) <= 2:
                        score += 0.5

                scores.append(score)

            # L·∫•y 5 m√≥n c√≥ ƒëi·ªÉm cao nh·∫•t
            self.recipes_df['match_score'] = scores
            top_matches = self.recipes_df.nlargest(5, 'match_score')

            # Format k·∫øt qu·∫£
            result = "D·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n, ƒë√¢y l√† 5 m√≥n ƒÉn ph√π h·ª£p nh·∫•t:\n\n"
            for idx, recipe in top_matches.iterrows():
                result += f"üç≥ {recipe['recipe_name']}\n"
                result += f"   - ƒê·ªô kh√≥: {recipe['difficulty']}\n"
                result += f"   - Th·ªùi gian n·∫•u: {recipe['cook_time']} ph√∫t\n"
                result += f"   - S·ªë ng∆∞·ªùi ƒÉn: {recipe['servings']} ng∆∞·ªùi\n"
                result += f"   - Phong c√°ch: {recipe['cuisine']}\n\n"

            return result

        except Exception as e:
            return f"Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t√¨m m√≥n ƒÉn ph√π h·ª£p: {str(e)}\n\nVui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng: time:30, difficulty:d·ªÖ, servings:4" 